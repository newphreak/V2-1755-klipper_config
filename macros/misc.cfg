[gcode_shell_command backup_cfg]
command: sh /home/pi/klipper_config/autocommit.sh
timeout: 30.0
verbose: True

[gcode_macro BACKUP_CFG]
gcode:
  RUN_SHELL_COMMAND CMD=backup_cfg

[gcode_macro DUMP_PARAMETERS]
description: Dump all Klipper parameters to terminal
gcode:
  {% set parameters = namespace(output = '') %}
  {% for name1 in printer %}
    {% for name2 in printer[name1] %}
      {% set donotwant = ['bed_mesh','configfile'] %}
      {% if name1 is not in donotwant %}
        {% set param = "printer['%s'].%s = %s" % (name1, name2, printer[name1][name2]) %}
        {% set parameters.output = parameters.output +  param + "\n" %}
      {% endif %}
      {% else %}
        {% set param = "printer['%s'] = %s" % (name1, printer[name1]) %}
        {% set parameters.output = parameters.output +  param + "\n" %}
    {% endfor %}
  {% endfor %}
  {action_respond_info(parameters.output)}

# Compare the GET_POSITION output before and after, see if you skipped steps. IIRC you want the "mcu" line to show within 16 before and after (a full step)
[gcode_macro SPEED_TEST]
gcode:
  # command params
  {% set i = params.I|default(1)|int %}
  {% set da = params.DIAGONAL_ACCEL|default(27000)|int %}
  {% set la = params.LINEAR_ACCEL|default(36000)|int %}
  # variables 
  {% set boarder_delta = printer['gcode_macro _USER_VARIABLE'].boarder_delta|float %}
  {% set min_x = printer.toolhead.axis_minimum.x|float %}
  {% set min_y = printer.toolhead.axis_minimum.y|float %}
  {% set max_x = printer.toolhead.axis_maximum.x|float %}
  {% set max_y = printer.toolhead.axis_maximum.y|float - boarder_delta %}
  # features
  {% set ena_debug = printer.save_variables.variables.debug|lower %}

  {% if ena_debug == "true" %}
    {action_respond_info('==== SPEED_TEST ====')}
    {action_respond_info("i: %s" % (i))}
    {action_respond_info("da: %s" % (da))}
    {action_respond_info("la: %s" % (la))}
    {action_respond_info("min_x: %s" % (min_x))}
    {action_respond_info("min_y: %s" % (min_y))}
    {action_respond_info("max_x: %s" % (max_x))}
    {action_respond_info("max_y: %s" % (max_y))}
    {action_respond_info('===============')}
  {% endif %}

  SAVE_GCODE_STATE NAME=SPEED_TEST
  G28 X Y
  GET_POSITION
  G90
  {% for iteration in range(i|int) %}
    G1 X{min_x} Y{min_y} F{da}
    G1 X{max_x} Y{max_y} F{da}
    G1 X{min_x} Y{min_y} F{da}
    G1 X{max_x} Y{max_y} F{da}

    G1 X{min_x} Y{max_y} F{la}

    G1 X{max_x} Y{min_y} F{da}
    G1 X{min_x} Y{max_y} F{da}
    G1 X{max_x} Y{min_y} F{da}
    G1 X{min_x} Y{max_y} F{da}

    G1 X{min_x} Y{min_y} F{la}
    G1 X{max_x} Y{min_y} F{la}
    G1 X{max_x} Y{max_y} F{la}
    G1 X{min_x} Y{max_y} F{la}
    G1 X{min_x} Y{min_y} F{la}
  {% endfor %}
  G28 X Y
  GET_POSITION
  RESTORE_GCODE_STATE NAME=SPEED_TEST

[delayed_gcode _CHECK_CONFIG]
initial_duration: 0.1
gcode:
  ## exexcute _USER_VARIABLE once at startup to do the needed calcs
  {% if printer['gcode_macro _USER_VARIABLE'] is not defined %}
    { action_respond_info(
        "CONFIG: ERROR\n"
        "_USER_VARIABLE macro missing\n"
        "This holds common variables for your printer and must be defined") }
  {% else %}
    _USER_VARIABLE
    ##### consistent check #####
    {% if printer['gcode_macro _USER_VARIABLE'].auto_z_offset|lower == 'z_calib' and 
      printer['gcode_macro _USER_VARIABLE'].probe_type|lower == 'unknown' %}
      {action_respond_info(
      "CONFIG: ERROR\n"
      "[z_calibration] defined but no probe found\n")}
    {% endif %}    
  {% endif %}
  ## check if save_variables are defined
  {% if 'save_variables' not in printer %}
    {action_respond_info(
      "CONFIG: ERROR\n"
      "[save_variables] missing\n"
      "This is needed to store variables to a file")}
  {% endif %}
[gcode_macro DUMP_WARNINGS]
description: Debug: Print all warning messages from klipper
gcode:
  {% set parameters = ["printer.configfile.warnings:"] %}
  {% for warning in printer.configfile.warnings %}
      {% set parameters = parameters.append("%s -> %s -> %s\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}
  {% endfor %}
  {action_respond_info(parameters|join("\n"))}