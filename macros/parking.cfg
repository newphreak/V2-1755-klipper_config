#####################################################################
#                            _.--~~~~~~~---------------._
#                          ,=-,.--#####----..--------.   `.
#                        ,'  ,/ _/_ ####   :!         `   ``.
#                       ,   ,/ [.[.]-=##   :!     /    `   `.`.
#                      ,   ,/   /_    )#   :!   // //   `    `.`.
#                     ,   /7    |_/   #    :!    // /    `     `.`.  ___,-
#                    .   ; |     \___/     :!             ;      `~`=    /
#              ___,--`--(  ;_____/__  \____:!__________,-'           `. /
#        __,--'         '~~         \  \ __`               ______      `.
#    _,-'                      _ ____\  \-o .             /ZZZZZ/        `.
#  ,'              turbo`     {_|_______)                                  `.
# .------ ------ ---- ---, --  --- - --- -- .--  - - ---  -- -   -- --- - --!
# !__'     ,-~~~-.                                     ,-~~~-.             /|
# | ,     ' ,mMm. `      .                  .         ' ,mMm. `           /-!
# ;-_____'.d-' `-b.`_____ __________________ ________'.d-' `-b.`_________/FS;_
#:      ;.d'\ _ /`b.\    .                  '       ;.d'\ _ /`b.\             :
#!====== d;-.' `.-:b ==== ================= ======== d;-.' `.-:b =============;
#`-.   : H  |   |  D :   `                 '       : H  |   |  D :     _ __,-'
#   `-.! C:-`._,'-;P ;_____________________________! C:-`._,'-;P ;__________7
#      ""`G./   \,S'"""""""""""""""""""""""""""""""""`G./   \,S'""""""""""""
#         `S-. ,-D'                                   `Q-. ,-S'
#          `&WSW8'                                     `&WSW8'
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#####################################################################
[gcode_macro _CG28]
description: Helper: conditional homing
gcode:
    # command params
    # variables 
    {% set homed_axes = printer.toolhead.homed_axes %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|lower %}
    
    {% if ena_debug == "true" %}
        {action_respond_info('==== _CG28 ====')}
        {action_respond_info("homed_axes: %s" % (homed_axes|join(',')))}
    {% endif %}

    {% if homed_axes != "xyz" %}
        G90
        G28
    {% endif %}

[gcode_macro PARK_FRONT]
description: Park head front high
gcode:
    # command params
    # variables 
    {% set min_y = printer.toolhead.axis_minimum.y|float %}
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set park_x = printer['gcode_macro _USER_VARIABLE'].center_x %}
    {% set z_max_delta = printer['gcode_macro _USER_VARIABLE'].z_max_delta|float %}
    {% set boarder_delta = printer['gcode_macro _USER_VARIABLE'].boarder_delta|float %}
    {% set park_y = min_y + boarder_delta %}
    {% set park_z = max_z - z_max_delta %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|lower %}

    {% if ena_debug == "true" %}
        {action_respond_info('==== PARK_FRONT ====')}
        {action_respond_info("min_y: %s" % (min_y))}
        {action_respond_info("max_z: %s" % (max_z))}
        {action_respond_info("z_max_delta: %s" % (z_max_delta))}
        {action_respond_info("boarder_delta: %s" % (boarder_delta))}
        {action_respond_info("park_y: %s" % (park_y))}
        {action_respond_info("park_z: %s" % (park_z))}
        {action_respond_info('===============')}
    {% endif %}
    
    SAVE_GCODE_STATE NAME=STATE_PARK_FRONT
    _CG28 ; home if not already homed
    G90   ; absolute positioning
    G0 X{park_x} Y{park_y} Z{park_z} F18000
    RESTORE_GCODE_STATE NAME=STATE_PARK_FRONT

[gcode_macro PARK_FRONT_MID]
description: Park head front middle
gcode:
    # command params
    # variables 
    {% set min_y = printer.toolhead.axis_minimum.y|float %}
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set park_x = printer['gcode_macro _USER_VARIABLE'].center_x %}
    {% set z_max_delta = printer['gcode_macro _USER_VARIABLE'].z_max_delta|float %}
    {% set boarder_delta = printer['gcode_macro _USER_VARIABLE'].boarder_delta|float %}
    {% set park_y = min_y + boarder_delta %}
    {% set park_z = max_z/2  %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|lower %}
    
    {% if ena_debug == "true" %}
        {action_respond_info('==== PARK_FRONT_MID ====')}
        {action_respond_info("min_y: %s" % (min_y))}
        {action_respond_info("max_z: %s" % (max_z))}
        {action_respond_info("park_x: %s" % (park_x))}
        {action_respond_info("z_max_delta: %s" % (z_max_delta))}
        {action_respond_info("boarder_delta: %s" % (boarder_delta))}
        {action_respond_info("park_y: %s" % (park_y))}
        {action_respond_info("park_z: %s" % (park_z))}
        {action_respond_info('===============')}
    {% endif %}
    
    SAVE_GCODE_STATE NAME=STATE_PARK_FRONT_MID
    _CG28 ; home if not already homed
    G90   ; absolute positioning
    G0 X{park_x} Y{park_y} Z{park_z} F18000
    RESTORE_GCODE_STATE NAME=STATE_PARK_FRONT_MID

[gcode_macro PARK_FRONT_LOW]
description: Park head front low
gcode:
    # command params
    # variables 
    {% set min_y = printer.toolhead.axis_minimum.y|float %}
    {% set park_x = printer['gcode_macro _USER_VARIABLE'].center_x %}
    {% set park_z = printer['gcode_macro _USER_VARIABLE'].z_min_delta %}
    {% set boarder_delta = printer['gcode_macro _USER_VARIABLE'].boarder_delta|float %}
    {% set park_y = min_y + boarder_delta %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|lower %}
    
    {% if ena_debug == "true" %}
        {action_respond_info('==== PARK_FRONT_LOW ====')}
        {action_respond_info("min_y: %s" % (min_y))}
        {action_respond_info("park_x: %s" % (park_x))}
        {action_respond_info("park_z: %s" % (park_z))}
        {action_respond_info("boarder_delta: %s" % (boarder_delta))}
        {action_respond_info("park_y: %s" % (park_y))}
        {action_respond_info('===============')}
    {% endif %}
    
    SAVE_GCODE_STATE NAME=STATE_PARK_FRONT_LOW
    _CG28 ; home if not already homed
    G90   ; absolute positioning
    G0 X{park_x} Y{park_y} Z{park_z} F18000
    RESTORE_GCODE_STATE NAME=STATE_PARK_FRONT_LOW

[gcode_macro PARK_CENTER]
description: Park head middle of printer
gcode:
    # command params
    # variables 
    {% set park_x = printer['gcode_macro _USER_VARIABLE'].center_x %}
    {% set park_y = printer['gcode_macro _USER_VARIABLE'].center_y %}
    {% set park_z = printer['gcode_macro _USER_VARIABLE'].center_z %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|lower %}

    {% if ena_debug == "true" %}
        {action_respond_info('==== PARK_CENTER ====')}
        {action_respond_info("park_x: %s" % (park_x))}
        {action_respond_info("park_y: %s" % (park_y))}
        {action_respond_info("park_z: %s" % (park_z))}
        {action_respond_info('===============')}
    {% endif %}

    SAVE_GCODE_STATE NAME=STATE_PARK_CENTER
    _CG28 ; Home if not already homed
    G90   ; absolute positioning
    G0 X{park_x} Y{park_y} Z{park_z} F18000
    RESTORE_GCODE_STATE NAME=STATE_PARK_CENTER

[gcode_macro PARK_BED]
description: Park head middle of bed low
gcode:
    # command params
    # variables 
    {% set park_x = printer['gcode_macro _USER_VARIABLE'].center_x %}
    {% set park_y = printer['gcode_macro _USER_VARIABLE'].center_y %}
    {% set park_z = printer['gcode_macro _USER_VARIABLE'].z_min_delta|float %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|lower %}
    
    {% if ena_debug == "true" %}
        {action_respond_info('==== PARK_BED ====')}
        {action_respond_info("park_x: %s" % (park_x))}
        {action_respond_info("park_y: %s" % (park_y))}
        {action_respond_info("park_z: %s" % (park_z))}
        {action_respond_info('===============')}
    {% endif %}
    
    SAVE_GCODE_STATE NAME=STATE_PARK_BED
    _CG28 ; home if not already homed
    G90   ; absolute positioning
    G0 X{park_x} Y{park_y} Z{park_z} F18000
    RESTORE_GCODE_STATE NAME=STATE_PARK_BED

[gcode_macro PARK_REAR]
description: Park head rear high
gcode:
    # command params
    # variables 
    {% set min_x = printer.toolhead.axis_minimum.x|float %}
    {% set max_y = printer.toolhead.axis_maximum.y|float %}
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set boarder_delta = printer['gcode_macro _USER_VARIABLE'].boarder_delta|float %}
    {% set z_max_delta = printer['gcode_macro _USER_VARIABLE'].z_max_delta|float %}
    {% set park_x = min_x + boarder_delta %}
    {% set park_y = max_y - boarder_delta %}
    {% set park_z = max_z - z_max_delta %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|lower %}
    
    {% if ena_debug == "true" %}
        {action_respond_info('==== PARK_REAR ====')}
        {action_respond_info("min_x: %s" % (min_x))}
        {action_respond_info("max_y: %s" % (max_y))}
        {action_respond_info("max_z: %s" % (max_z))}
        {action_respond_info("boarder_delta: %s" % (boarder_delta))}
        {action_respond_info("z_max_delta: %s" % (z_max_delta))}
        {action_respond_info("park_x: %s" % (park_x))}
        {action_respond_info("park_y: %s" % (park_y))}
        {action_respond_info("park_z: %s" % (park_z))}
        {action_respond_info('===============')}
    {% endif %}
    
    SAVE_GCODE_STATE NAME=STATE_PARK_REAR
    _CG28 ; Home if not already homed
    G90   ; absolute positioning
    G0 X{park_x} Y{park_y} Z{park_z} F18000
    RESTORE_GCODE_STATE NAME=STATE_PARK_REAR

# #####################################################################
# #  Display Menu
# #####################################################################
## parking selection
[menu __main __parking]
type: list
name: Parking
enable: {not printer.idle_timeout.state == "Printing"}
index: 1

[menu __main __parking __front]
type: command
name:  Front
gcode:
    PARK_FRONT

[menu __main __parking __front_mid]
type: command
name:  Front Mid
gcode:
    PARK_FRONT_MID

[menu __main __parking __front_low]
type: command
name:  Front Low
gcode:
    PARK_FRONT_LOW

[menu __main __parking __center]
type: command
name:  Center
gcode:
    PARK_CENTER

[menu __main __parking __bed]
type: command
name:  Bed
gcode:
    PARK_BED

[menu __main __parking __rear]
type: command
name:  Rear
gcode:
    PARK_REAR
