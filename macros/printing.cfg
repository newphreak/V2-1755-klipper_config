#########NEEDED IN SLICER FOR TEMPERATURES TO WORK###########################################################################################################################
## START_PRINT BED_TEMPERATURE=[first_layer_bed_temperature] EXTRUDER_TEMPERATURE=[first_layer_temperature] CHAMBER=[chamber_temperature] FILAMENT_TYPE={filament_type[0]} ##
#############################################################################################################################################################################
[gcode_macro START_PRINT]
default_parameter_BED_TEMPERATURE: 60
default_parameter_EXTRUDER_TEMPERATURE: 200
default_parameter_CHAMBER: 42
gcode:
    G28
    G90                                                                         ;Absolute positioning
    G1 X150 Y150 Z20 F12000
    {% if FILAMENT_TYPE == "ABS" or FILAMENT_TYPE == "ASA" %}
      SET_FAN_SPEED FAN=exhaust_fan SPEED=0.10
      SET_FAN_SPEED FAN=nevermore SPEED=0.60
    {% endif %}
    M106 S255
      M117 Heating shit
  M190 S{params.BED_TEMPERATURE}                                                            ; Set bed to final temp and$  {% set chamber = printer['temperature_sensor chamber'] %}
  {% if params.BED_TEMPERATURE|int > 70 and chamber.temperature < params.CHAMBER|int %}     ; Heat soak if needed
    M117 Soaking: {CHAMBER}~degrees~
    M109 S150                                                                   ; Set hotend to 150 and wait for temp
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={CHAMBER}      ; Wait for chamber temp
    M106 S0                                                                     ; Turn on Part Cooling Fan off
  {% endif %}
    SONG_SIMPLE_DONE
    G32
    M117 Calibrating Mesh
    BED_MESH_CALIBRATE
    BED_MESH_PROFILE LOAD=default
    G1 X50 Y5 Z10 F15000                                                        ;Move to front left corner and wait for$    M117 Heating ~extruder~
    M109 S{EXTRUDER_TEMPERATURE}                                                ;Set real nozzle temperature1
    G1 E7 F900
    G92 E0.0
    M117 Printer goes Brr

[gcode_macro END_PRINT]
gcode:
    M117 WOHO, FINITO
    G91                                                                         ;Relative positioning
    G1 E-8 Z0.2 F1500                                                           ;Retract and raise Z
    G1 X5 Y5 F15000                                                             ;Wipe out
    G1 Z10                                                                      ;Raise Z more
    G90                                                                         ;Absolute positioning
    G92 E0                                                                      ;Reset extruder
    M106 S0                                                                     ;Turn-off fan
    M104 S0                                                                     ;Turn-off hotend
    M140 S0                                                                     ;Turn-off bed
    SONG_STARWARS_IMP
    G28 X0 Y0                                                                   ;Home X and Y
    BED_MESH_CLEAR
    {% if FILAMENT_TYPE == "ABS" or FILAMENT_TYPE == "ASA" %}
    FILTER_CHAMBER TIME=10
    {% endif %}
    UPDATE_DELAYED_GCODE ID=shutoff_timer DURATION=60

[delayed_gcode shutoff_timer]
gcode:
  M84 X Y Z E
  M117

[gcode_macro FILTER_CHAMBER]
default_parameter_BED_TEMPERATURE: 48
gcode:
    M117 Cooling down ~fan~
    SET_FAN_SPEED FAN=nevermore SPEED=0.65
    SET_FAN_SPEED FAN=exhaust_fan SPEED=0.25
    TEMPERATURE_WAIT SENSOR="heater_bed" MAXIMUM={BED_TEMPERATURE}      ; Wait for chamber temp
    SONG_SIMPLE_DONE
    SET_FAN_SPEED FAN=nevermore SPEED=0
    SET_FAN_SPEED FAN=exhaust_fan SPEED=0
    M117

# [gcode_macro PRINT_END_COOLDOWN]
# description: 
# gcode:
#   SAVE_VARIABLE VARIABLE=print_end_routine VALUE='"cooldown"'
#   {action_respond_info('Print end cooldown set')}
# 	SONG_SINGLE_BEEP

# [gcode_macro PRINT_END_RESTART]
# description: 
# gcode:
#   SAVE_VARIABLE VARIABLE=print_end_routine VALUE='"restart"'
# 	{action_respond_info('Print end restart set')}
# 	SONG_SINGLE_BEEP

#########NEEDED IN SLICER FOR TEMPERATURES TO WORK###########################################################################################################################
## PRINT_START BED=[first_layer_bed_temperature] EXTRUDER=[first_layer_temperature] CHAMBER=[chamber_temperature] FILAMENT={filament_type[0]} ##
#############################################################################################################################################################################
[gcode_macro PRINT_START]
gcode:
  # command params
  {% set target_bed = params.BED|default(110)|int %}
  {% set target_extruder = params.EXTRUDER|default(150)|int %}
  {% set target_chamber = params.CHAMBER|default(0)|int %}
  {% set filament_type = params.FILAMENT|default("ABS")|upper %}
  # variables 
  {% set plate_offset_z = printer.save_variables.variables.plate_array[printer.save_variables.variables.plate_index|int][1] %}
  {% set plate_name = printer.save_variables.variables.plate_array[printer.save_variables.variables.plate_index|int][0] %}
  {% set default_display_lights_color = printer['gcode_macro _USER_VARIABLE'].default_display_lights_color|lower %}
  {% set default_case_lights_color = printer['gcode_macro _USER_VARIABLE'].default_case_lights_color|lower %}
  {% set unretract_start = printer['gcode_macro _USER_VARIABLE'].unretract_start|float %}
  # features
  {% set ena_debug = printer.save_variables.variables.debug|lower %}
  {% set ena_auto_z_offset = printer['gcode_macro _USER_VARIABLE'].auto_z_offset|lower %}
  {% set ena_quad_gantry_level = printer['gcode_macro _USER_VARIABLE'].quad_gantry_level|lower %}
  {% set ena_bed_mesh = printer['gcode_macro _USER_VARIABLE'].bed_mesh|lower %}
  
  {% if ena_debug == "true" %}
    {action_respond_info('==== PRINT_START ====')}
    {action_respond_info("targets [bed: %s, extruder: %s, chamber: %s, filament_type: %s]" % (target_bed,target_extruder,target_chamber,filament_type))}
    {action_respond_info("features [auto_z_offset: %s, quad_gantry_level: %s, bed_mesh: %s]" % (ena_auto_z_offset,ena_quad_gantry_level,ena_bed_mesh))}
    {% if printer.bed_mesh %}
      {action_respond_info("bed_mesh [profile_name: %s]" % (printer.bed_mesh.profile_name))}
    {% endif %}
    {% if ena_auto_z_offset == "flexplate" %}
      {action_respond_info("flexplate [name: %s, offset_z: %s]" % (plate_name,plate_offset_z))}
    {% endif %}
    {action_respond_info("default_lights_color: [display:%s,case:%s]" % (default_display_lights_color,default_case_lights_color))}
    {action_respond_info("unretract_start: %s" % (unretract_start))}
    {action_respond_info('===============')}
  {% endif %}

  {default_display_lights_color} CASE=0
  {default_case_lights_color} DISPLAY=0

  M117 Homing
  G28

  # TODO: Make this extruder holding temp a var EXTRUDER={target_extruder_holding}
  PREHEAT_CHAMBER BED={target_bed} CHAMBER={target_chamber} FILAMENT={filament_type}

  {% if ena_quad_gantry_level == "true" or ena_bed_mesh == "true" or ena_auto_z_offset == "z_calib" %}
    {% if ena_quad_gantry_level == "true" and not printer.quad_gantry_level.applied %}
      M117 Calibrating QGL
      QUAD_GANTRY_LEVEL
      G28 Z
    {% endif %}

    {% if ena_auto_z_offset == "z_calib" %}
      M117 Calibrating Z
      CALIBRATE_Z
    {% elif ena_auto_z_offset == "flexplate" and printer.save_variables.variables.plate_array[printer.save_variables.variables.plate_index|int] %}
      M117 Setting Z Offset
      DISPLAY_PLATE
      _SET_PLATE_OFFSET
    {% endif %}

    {% if ena_bed_mesh == "true" %}
      {% if printer.bed_mesh.profile_name %}
        M119 Loading Mesh {printer.bed_mesh.profile_name}
        BED_MESH_PROFILE LOAD={printer.bed_mesh.profile_name}
      {% else %}
        M117 Calibrating Mesh
        BED_MESH_CALIBRATE
        BED_MESH_PROFILE LOAD=default
      {% endif %}
    {% endif %}
  {% endif %}

  M117 Heating ~extruder~: {target_extruder}~degrees~
  M109 S{target_extruder} # Wait for extruder final temp

  G1 Z5 F5000 # Move head 5mm from bed surface
  G90 # Absolute Positioning
  M83 # Make the E relative independant of other axis
  G1 E{unretract_start} F1500 # Unretract filament
  RESET_EXTRUDER

  white
  M117 Printer goes brrr

[gcode_macro PREHEAT_CHAMBER]
gcode:
  # command params
  {% set target_bed = params.BED|default(110)|int %}
  {% set target_extruder = params.EXTRUDER|default(150)|int %}
  {% set target_chamber = params.CHAMBER|default(0)|int %}
  {% set filament_type = params.FILAMENT|default("ABS")|upper %}
  # variables 
  {% set preheat_filament_types = printer['gcode_macro _USER_VARIABLE'].preheat_filament_types %}
  {% set preheat_min_soak_time = printer['gcode_macro _USER_VARIABLE'].preheat_min_soak_time %}
  {% set park_x = printer['gcode_macro _USER_VARIABLE'].center_x %}
  {% set park_y = printer['gcode_macro _USER_VARIABLE'].center_y %}
  {% set park_z = printer['gcode_macro _USER_VARIABLE'].z_min_delta|float %}
  {% set default_display_lights_color = printer['gcode_macro _USER_VARIABLE'].default_display_lights_color|lower %}
  {% set default_case_lights_color = printer['gcode_macro _USER_VARIABLE'].default_case_lights_color|lower %}
  # features
  {% set ena_debug = printer.save_variables.variables.debug|lower %}

  {% if ena_debug == "true" %}
    {action_respond_info('==== PREHEAT_CHAMBER ====')}
    {action_respond_info("targets [bed: %s, extruder: %s, chamber: %s, filament_type: %s]" % (target_bed,target_extruder,target_chamber,filament_type))}
    {action_respond_info("preheat_min_soak_time: %s" % (preheat_min_soak_time))}
    {action_respond_info("park [x: %s,y: %s,z: %s" % (park_x,park_y,park_z))}
    {action_respond_info("default_lights_color: [display:%s,case:%s]" % (default_display_lights_color,default_case_lights_color))}
    {action_respond_info('===============')}
  {% endif %}
  
  orange
  M117 Preheat Start
  G90   ; absolute positioning
  G0 X{park_x} Y{park_y} Z{park_z} F18000

  M106 S255 # Turn on Part Cooling Fans to 100%
  _CIRCULATION_START FILAMENT={filament_type}

  # Bring the extruder and bed up to targets
  M104 S{target_extruder}
  M117 Heating ~bed~{target_bed}~degrees~
  M190 S{target_bed}       
  M117 Heating ~extruder~{target_extruder}~degrees~
  M109 S{target_extruder}   

  # Chamber/time soak for some filament types
  {% if filament_type in preheat_filament_types %}

    # Timed bed soak
    {% if preheat_min_soak_time > 0 %}
      {% for timer in range(preheat_min_soak_time|int,0,-1) %}
        M117 Soaking ~bed~ {timer|int}m 
        M105
        G4 P60000
      {% endfor %}
    {% endif %}

    # Chamber soak
    {% if printer['temperature_sensor chamber'] and target_chamber > 0 and printer['temperature_sensor chamber'].temperature < target_chamber %}
      M117 Soaking ~chamber~ {target_chamber}~degrees~
      TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}
    {% endif %}
  {% endif %}

  M106 S0 # Turn off Part Cooling Fans
  {default_display_lights_color} CASE=0
  {default_case_lights_color} DISPLAY=0

  PUSHOVER_PREHEAT_COMPLETE
  M117 Preheat Done
  SONG_SINGLE_BEEP

[gcode_macro PRINT_END]
gcode:
  # command params
  {% set target_bed = params.BED|default(110)|int %}
  {% set target_extruder = params.EXTRUDER|default(150)|int %}
  # variables 
  {% set print_end_routine = printer.save_variables.variables.print_end_routine|lower %}
  {% set retract_end = printer['gcode_macro _USER_VARIABLE'].retract_end|float %}
  {% set can_extrude = printer.extruder.can_extrude|lower %}
  {% set min_x = printer.toolhead.axis_minimum.x|float %}
  {% set min_y = printer.toolhead.axis_minimum.y|float %}
  {% set max_y = printer.toolhead.axis_maximum.y|float %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set boarder_delta = printer['gcode_macro _USER_VARIABLE'].boarder_delta|float %}
  {% set park_end_x = min_x + boarder_delta %}
  {% set park_end_y = max_y - boarder_delta %}
  {% set park_restart_x = printer['gcode_macro _USER_VARIABLE'].center_x|float %}
  {% set park_restart_y = min_y + boarder_delta %}
  {% set park_restart_z = max_z/2 %}
  {% set default_display_lights_color = printer['gcode_macro _USER_VARIABLE'].default_display_lights_color|lower %}
  {% set default_case_lights_color = printer['gcode_macro _USER_VARIABLE'].default_case_lights_color|lower %}
  # features
  {% set ena_debug = printer.save_variables.variables.debug|lower %}
  
  {% if ena_debug == "true" %}
    {action_respond_info('==== PRINT_END ====')}
    {action_respond_info("print_end_routine: %s" % (print_end_routine))}
    {action_respond_info("retract_end: %s" % (retract_end))}
    {action_respond_info("can_extrude: %s" % (can_extrude))}
    {action_respond_info("min: [x:%s,y:%s]" % (min_x,min_y))}
    {action_respond_info("max: [y:%s,z:%s]" % (max_y,max_z))}
    {action_respond_info("boarder_delta: %s" % (boarder_delta))}
    {action_respond_info("park_end: [x:%s,y:%s]" % (park_end_x,park_end_y))}
    {action_respond_info("park_restart: [x:%s,y:%s,z:%s]" % (park_restart_x,park_restart_y,park_restart_z))}
    {action_respond_info("default_lights_color: [display:%s,case:%s]" % (default_display_lights_color,default_case_lights_color))}
    {action_respond_info('===============')}
  {% endif %}

  M400  # wait for buffer to clear
  {% if can_extrude == 'true' %}
    G92 E0  # zero the extruder
    G1 E-{retract_end} F2200  # retract filament
  {% endif %}
  G91 # relative positioning
  G0 Z1.00 X20.0 Y20.0 F20000 # move nozzle to remove stringing
    TURN_OFF_HEATERS
  M107  # turn off fan
  G1 Z2 F3000 # move nozzle up 2mm
  G90 # absolute positioning
    G0 X{park_end_x} Y{park_end_y} F18000 # park nozzle at rear 
    M117 Print complete!
  M84
  BED_MESH_CLEAR
  _CIRCULATION_END
  M117
    {default_display_lights_color} CASE=0
  {default_case_lights_color} DISPLAY=0

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
  # command params
  # variables 
  {% set can_extrude = printer.extruder.can_extrude|lower %}
  # features
  {% set ena_debug = printer.save_variables.variables.debug|lower %}
  
  {% if ena_debug == "true" %}
    {action_respond_info('==== CANCEL_PRINT ====')}
    {action_respond_info("can_extrude: %s" % (can_extrude))}
    {action_respond_info('===============')}
  {% endif %}

  {% if can_extrude == 'true' %}
    G92 E0  # zero the extruder
  {% endif %}

  TURN_OFF_HEATERS
  CLEAR_PAUSE
  SDCARD_RESET_FILE
  PRINT_END
  BASE_CANCEL_PRINT
