#####################################
#       Printer Tuning Macros       #
#####################################

# Set up sequential printing, add TUNE_PRESSURE_ADVANCE STEP_DELTA=<+/- step> SMOOTH_STEP_DELTA=<+/- step> into
# your slicers "Between objects G-code (for sequential printing)"
[gcode_macro TUNE_PRESSURE_ADVANCE]
description: PA tuning by changing PA and/or smoothing
gcode:
    # command params
    {% set step_delta = params.STEP_DELTA|default(0)|float %}
    {% set smooth_step_delta = params.SMOOTH_STEP_DELTA|default(0)|float %}
    {% set debug = params.DEBUG|default(0)|int %}
    # variables
    {% set pressure_advance = printer.extruder.pressure_advance + step_delta %}
    {% set smooth_time = printer.extruder.smooth_time + step_delta %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|default("false")|lower %}

    {% if ena_debug == "true" or debug == 1 %}
        {action_respond_info("==== TUNE_PRESSURE_ADVANCE ====")}
        {action_respond_info("step_delta: '%s'" % (step_delta))}
        {action_respond_info("smooth_step_delta: '%s'" % (smooth_step_delta))}
        {action_respond_info("pressure_advance: '%s'" % (pressure_advance))}
        {action_respond_info("smooth_time: '%s'" % (smooth_time))}
        {action_respond_info("===============")}
    {% endif %}

    {action_respond_info("Tuning pressure_advance: %f -> %f, smooth_time %f -> %f" %
        (printer.extruder.pressure_advance,pressure_advance,
        printer.extruder.smooth_time,smooth_time))}
    SET_PRESSURE_ADVANCE ADVANCE={pressure_advance} SMOOTH_TIME={smooth_time}

# Set up sequential printing, add TUNE_FAN_SPEED STEP_DELTA=<+/- step> into
# your slicers "Between objects G-code (for sequential printing)"
[gcode_macro TUNE_FAN_SPEED]
description: Fan tuning by changing part cooling fan speed
gcode:
    # command params
    {% set step_delta = params.STEP_DELTA|float %}
    {% set debug = params.DEBUG|default(0)|int %}
    # variables
    {% set new_speed = printer.fan.speed + step_delta %}
    {% set new_speed_percent = new_speed * 100 %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|default("false")|lower %}

    {% if ena_debug == "true" or debug == 1 %}
        {action_respond_info("==== TUNE_FAN_SPEED ====")}
        {action_respond_info("step_delta: '%s'" % (step_delta))}
        {action_respond_info("new_speed: '%s'" % (new_speed))}
        {action_respond_info("new_speed_percent: '%s'" % (new_speed_percent))}
        {action_respond_info("===============")}
    {% endif %}

    {action_respond_info("Tuning fan: Speed %d -> %d" %
        (printer.fan.speed * 100,(new_speed*100)))}
    M106 S{255 * new_speed}

# Set up sequential printing, add TUNE_Z_OFFSET STEP_DELTA=<+/- step> into
# your slicers "Between objects G-code (for sequential printing)"
[gcode_macro TUNE_Z_OFFSET]
description: First layer tuning by changing z_offset
gcode:
    # command params
    {% set step_delta = params.STEP_DELTA|float %}
    {% set debug = params.DEBUG|default(0)|int %}
    # variables
    {% set new_z_offset = printer.gcode_move.homing_origin.z + step_delta %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|default("false")|lower %}

    {% if ena_debug == "true" or debug == 1 %}
        {action_respond_info("==== TUNE_Z_OFFSET ====")}
        {action_respond_info("step_delta: '%s'" % (step_delta))}
        {action_respond_info("new_z_offset: '%s'" % (new_z_offset))}
        {action_respond_info("===============")}
    {% endif %}

    SET_GCODE_OFFSET Z_ADJUST={step_delta}
    {action_respond_info("Tuning Z offset: %f -> %f" %
        (printer.gcode_move.homing_origin.z,new_z_offset))}

# From (https://github.com/AndrewEllis93/Print-Tuning-Guide/blob/main/Macros/TEST_SPEED.cfg)
# Please read (https://github.com/AndrewEllis93/Print-Tuning-Guide#determining-maximum-speeds-and-accelerations) for details on how to use this macro.
#
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10
[gcode_macro TEST_SPEED]
description: Used to test max SPEED and ACCEL
gcode:
    # command params
    {% set speed = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	{% set iterations = params.ITERATIONS|default(5)|int %}
	{% set accel = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    {% set bound = params.BOUND|default(20)|int %}
    {% set debug = params.DEBUG|default(0)|int %}
    # variables
    {% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|default("false")|lower %}

    {% if ena_debug == "true" or debug == 1 %}
        {action_respond_info("==== TEST_SPEED ====")}
        {action_respond_info("speed: '%s'" % (speed))}
        {action_respond_info("iterations: '%s'" % (iterations))}
        {action_respond_info("bound: '%s'" % (bound))}
        {action_respond_info("new_z_offset: '%s'" % (new_z_offset))}
        {action_respond_info("min: [x: '%s', y:'%s']" % (x_min,y_min))}
        {action_respond_info("max: [x: '%s', y:'%s']" % (x_max,y_max))}
        {action_respond_info("===============")}
    {% endif %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED

    # Absolute positioning
    G90

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    # Home and get position for comparison later:
    G28
    # QGL if not already QGLd (only if QGL section exists in config)
    {% if printer.configfile.settings.quad_gantry_level %}
        {% if printer.quad_gantry_level.applied == False %}
            QUAD_GANTRY_LEVEL
            G28 Z
        {% endif %}
    {% endif %}
    G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
    G4 P1000
    GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed * 60}

    {% for i in range(iterations) %}
        # Diagonals
        G0 X{x_min} Y{y_min} F{speed * 60}
        G0 X{x_max} Y{y_max} F{speed * 60}
        G0 X{x_min} Y{y_min} F{speed * 60}
        G0 X{x_max} Y{y_min} F{speed * 60}
        G0 X{x_min} Y{y_max} F{speed * 60}
        G0 X{x_max} Y{y_min} F{speed * 60}
        # Box
        G0 X{x_min} Y{y_min} F{speed * 60}
        G0 X{x_min} Y{y_max} F{speed * 60}
        G0 X{x_max} Y{y_max} F{speed * 60}
        G0 X{x_max} Y{y_min} F{speed * 60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}

    # Re-home XY and get position again for comparison:
    G28 X Y
    # Go to XY home positions (in case your homing override leaves it elsewhere)
    G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
    G4 P1000
    GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED